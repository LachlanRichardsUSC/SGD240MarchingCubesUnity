#pragma kernel CSMain

#include "Noise.compute"

RWStructuredBuffer<float> densityMap;

int gridSize;
float noiseScale;
float noiseAmplitude;
float planetRadius;
float paddingFactor;

float3 GetWorldPos(uint3 pos)
{
    // Convert to world position centered around origin with padding
    float3 gridPos = (float3)pos;
    float3 centered = gridPos - float3(gridSize/2, gridSize/2, gridSize/2);
    float3 scaled = centered / (float)(gridSize/2 * paddingFactor);
    return scaled;
}

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= uint3(gridSize, gridSize, gridSize))) return;

    float3 worldPos = GetWorldPos(id);
    float distanceFromCenter = length(worldPos);
    
    // Scale the radius with padding
    float scaledRadius = planetRadius / paddingFactor;
    
    // Calculate base sphere density
    float density = distanceFromCenter - scaledRadius;
    
    // Add noise if enabled
    if (noiseAmplitude > 0)
    {
        float noise = 0;
        float frequency = noiseScale;
        float amplitude = noiseAmplitude;
        
        // Add octaves of noise
        for(int i = 0; i < 3; i++)
        {
            noise += snoise(worldPos * frequency) * amplitude;
            frequency *= 2.0;
            amplitude *= 0.5;
        }
        
        density += noise;
    }
    
    int index = id.x + gridSize * (id.y + gridSize * id.z);
    densityMap[index] = density;
}