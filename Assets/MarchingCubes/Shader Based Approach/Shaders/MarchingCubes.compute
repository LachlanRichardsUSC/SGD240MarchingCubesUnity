#pragma kernel CSMain

#include "MarchingCubesTable.compute"

StructuredBuffer<float> densityMap;
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> triangles;
RWStructuredBuffer<int> vertexCounter;
RWStructuredBuffer<int> triangleCounter;

int gridSize;
float voxelSize;
float isoLevel;
float paddingFactor;

float SampleDensity(uint3 pos)
{
    if (any(pos >= uint3(gridSize, gridSize, gridSize))) return 1.0;
    int index = pos.x + gridSize * (pos.y + gridSize * pos.z);
    return densityMap[index];
}

float3 GetWorldPos(uint3 pos)
{
    float3 gridPos = (float3)pos;
    float3 centered = gridPos - float3(gridSize/2, gridSize/2, gridSize/2);
    return centered * (voxelSize / paddingFactor);
}

float3 InterpolateVerts(float3 pos1, float3 pos2, float val1, float val2)
{
    float t = (isoLevel - val1) / (val2 - val1);
    return lerp(pos1, pos2, t);
}

uint3 GetCubeCorner(uint3 pos, int cornerIndex)
{
    uint3 cornerOffsets[8] = {
        uint3(0, 0, 0), uint3(1, 0, 0), uint3(1, 1, 0), uint3(0, 1, 0),
        uint3(0, 0, 1), uint3(1, 0, 1), uint3(1, 1, 1), uint3(0, 1, 1)
    };
    return pos + cornerOffsets[cornerIndex];
}

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint3 maxSize = uint3(gridSize - 1, gridSize - 1, gridSize - 1);
    if (any(id >= maxSize)) return;

    float cubeValues[8];
    float3 cubePositions[8];
    
    for (int i = 0; i < 8; i++)
    {
        uint3 cornerPos = GetCubeCorner(id, i);
        cubeValues[i] = SampleDensity(cornerPos);
        cubePositions[i] = GetWorldPos(cornerPos);
    }

    int cubeIndex = 0;
    for (int i = 0; i < 8; i++)
    {
        if (cubeValues[i] > isoLevel)
        {
            cubeIndex |= 1 << i;
        }
    }

    int edgeFlags = edgeTable[cubeIndex];
    if (edgeFlags == 0) return;

    float3 vertList[12];
    for (int i = 0; i < 12; i++)
    {
        if (edgeFlags & (1 << i))
        {
            int v1 = cornerIndexAFromEdge[i];
            int v2 = cornerIndexBFromEdge[i];
            
            vertList[i] = InterpolateVerts(
                cubePositions[v1],
                cubePositions[v2],
                cubeValues[v1],
                cubeValues[v2]
            );
        }
    }

    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
    {
        int vertexIndex;
        InterlockedAdd(vertexCounter[0], 3, vertexIndex);
        
        for (int j = 0; j < 3; j++)
        {
            int edgeIndex = triangulation[cubeIndex][i + j];
            vertices[vertexIndex + j] = vertList[edgeIndex];
        }
        
        int triIndex;
        InterlockedAdd(triangleCounter[0], 3, triIndex);
        
        for (int j = 0; j < 3; j++)
        {
            triangles[triIndex + j] = vertexIndex + j;
        }
    }
}